'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/ycc/lab/note/lab1/','title':"实验1 词法分析",'content':"Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter , per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum .\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"});index.add({'id':1,'href':'/ycc/other/faq/','title':"常见问题",'content':"常见问题 "});index.add({'id':2,'href':'/ycc/lab/summary/submit/','title':"提交方法",'content':"提交方法 待编写  "});index.add({'id':3,'href':'/ycc/lab/lang-std/lexical/','title':"词法规范",'content':"词法规范 待编写  YC0 以下是YC0的词法规则，使用正则表达式表示。\n   名称 符号     IDENTIFIER [A-Za-z_][A-Za-z0-9_]*   INT_LIT 0|[1-9][0-9]*   FLOAT_LIT (0|[1-9][0-9]*).[0-9]*       名称 符号 名称 符号 名称 符号     ADD + KW_INT int LPAREN (   MINUS - KW_FLOAT float RPAREN )   MULTI * KW_VOID void LBRACE {   DIV / KW_IF if RBRACE }   GT \u0026gt; KW_ELSE else COLUMN ;   GTE \u0026gt;= KW_WHILE while COMMA ,   LT \u0026lt; KW_CONTINUE continue     LTE \u0026lt;= KW_BREAK break     EQ == KW_RETURN return     NEQ !=        YC1 "});index.add({'id':4,'href':'/ycc/other/reference/','title':"参考资料",'content':"参考资料 这里是你可以参考的相似项目和相关资料，欢迎补充。\n课程实验  伯克利的 CS164: Programming Languages and Compilers, Spring 2019  斯坦福的 CS143: Compilers  CMU的 15-411 Compiler Design  清华的 Decaf   开源编译器\u0026amp;解释器   wenyan : 文言文编程  Wren   Pony   SmallerC   8cc   ShivyC   xcc   wgtcc   电子书   Lox解释器及其配套电子书  源码: https://github.com/munificent/craftinginterpreters    Introduction to Compilers and Language Design  配套代码: https://github.com/dthain/compilerbook-examples    A small demonstration how to use ANTLR 4\u0026rsquo;s visitor feature.   PCAsm   "});index.add({'id':5,'href':'/ycc/lab/note/lab2/','title':"实验2 语法分析",'content':"At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt . Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"});index.add({'id':6,'href':'/ycc/lab/summary/grade-policy/','title':"评分标准",'content':"评分标准 待编写  "});index.add({'id':7,'href':'/ycc/lab/lang-std/grammar/','title':"语法规范",'content':"语法规范 编写中  我们使用扩展BNF范式描述我们的文法。\n 以下内容修改自 Decaf语言规范 。\n * 表示一个符号出现任意多次，包括零次 + 表示一个符号出现至少一次 ? 表示一个符号可选，即至多出现一次 | 分隔多个产生式右部，无顺序 ε 表示空，即不存在任何符号  所有终结符要么以单引号字符串的形式直接出现，或者用以全大写字母的标识符代替，非终结符对应的标识符均以大写字母开头,并使用驼峰命名法。此外，我们还使用 () 来显式限定上述元符号作用的符号或者符号串。\n YC0 终结符的词法规则见 词法规范 | YC0 。\n为了让文法尽可能的简单，我们没有将许多语义显示的注入文法当中。对于详细的语义要求，如表达式优先级等，请查看 语义说明 | YC0 。\n/* 程序结构 */ Program ::= Decl* Decl ::= VarDecl | FuncDecl Block ::= Stmt* Stmt ::= VarDecl | ExprStmt | IfStmt | WhileStmt | ReturnStmt | EmptyStmt EmptyStmt ::= \u0026#39;;\u0026#39; /* 变量 */ VarDecl ::= Type Id \u0026#39;=\u0026#39; Expr \u0026#39;;\u0026#39; Type ::= \u0026#39;int\u0026#39; | \u0026#39;float\u0026#39; | \u0026#39;void\u0026#39; /* 表达式 */ Expr ::= \u0026#39;(\u0026#39; Expr \u0026#39;)\u0026#39; // 括号表达式 | Literal // 常量, 如1.34, 10 | Id // 标识符也是表达式 | FunCall // 函数调用 | UnaryExpr // 一元表达式 | BinaryExpr // 二元表达式 | TypeCastExpr // 类型转换 Literal ::= INT_LIT | FLOAT_LIT Id ::= IDENTIFIER FunCall ::= Id \u0026#39;(\u0026#39; ArgList \u0026#39;)\u0026#39; ArgList ::= Expr ((\u0026#39;,\u0026#39; Expr)* | ε) // 实参列表 UnaryExpr ::= UnaryOp Expression UnaryOp ::= \u0026#39;-\u0026#39; BinaryExpr ::= Expr BinaryOp Expr BinaryOp ::= \u0026#39;*\u0026#39; | \u0026#39;/\u0026#39; | \u0026#39;+\u0026#39; | \u0026#39;-\u0026#39; | \u0026#39;\u0026gt;\u0026#39; | \u0026#39;\u0026gt;=\u0026#39; | \u0026#39;\u0026lt;\u0026#39; | \u0026#39;\u0026lt;=\u0026#39; | \u0026#39;==\u0026#39; | \u0026#39;!=\u0026#39; | \u0026#39;=\u0026#39; TypeCastExpr ::= \u0026#39;(\u0026#39; Type \u0026#39;)\u0026#39; Expression /* 分支 */ IfStmt ::= \u0026#39;if\u0026#39; \u0026#39;(\u0026#39; Expr \u0026#39;)\u0026#39; Block ( \u0026#39;else\u0026#39; Block )? /* 循环 */ WhileStmt ::= \u0026#39;while\u0026#39; \u0026#39;(\u0026#39; Expr \u0026#39;)\u0026#39; Block ContinueStmt ::= \u0026#39;continue\u0026#39; \u0026#39;;\u0026#39; BreakStmt ::= \u0026#39;break\u0026#39; \u0026#39;;\u0026#39; /* 函数 */ FuncDecl ::= Type Id \u0026#39;(\u0026#39; ParaList \u0026#39;)\u0026#39; Block ParaList ::= Para ((\u0026#39;,\u0026#39; Para)* | ε) // 形参列表 Para ::= Type Id ReturnStmt ::= \u0026#39;return\u0026#39; Expression? \u0026#39;;\u0026#39; YC1 "});index.add({'id':8,'href':'/ycc/announcements/','title':"重要通知",'content':"重要通知 2020-3-21  发布实验框架0.1-beta版，支持词法，语法分析。  "});index.add({'id':9,'href':'/ycc/lab/summary/honor-code/','title':"学术诚信声明",'content':"学术诚信声明 待编写  "});index.add({'id':10,'href':'/ycc/lab/lang-std/semantic/','title':"语义说明",'content':"语义说明 编写中  YC0 在 语言规范 一章中，我们已经说了，YC0的文法是C语言文法的一个子集，因此YC0程序也是C语言程序。本节主要阐述YC0语言相对于C语言的一些特殊规定。\n程序结构 一个YC0程序由数个声明（Declaration）构成，声明包括 函数声明 和 变量声明 。\n变量 还记得C语言是怎么定义变量的吗？我们的YC语言与你之前所学的没有什么不同，例如，你可以像下面这样定义YC语言中的变量。\nint a = 10; // 定义一个名叫a的整型变量，并赋初值为10 float b = 3.14; // 定义一个名叫a的单精度浮点型变量，并赋初值为3.14 但是，为了简单请见，在YC0中，我们对变量定义做了一些限制。\n YC0只支持有限的3种数据类型，分别是int, float, void,（void只能作为函数返回值的类型）。 所有变量必须在定义的时候初始化。 一次只能定义一个变量。  关于上述要求，以下是几个例子:\nchar a = \u0026#39;c\u0026#39; // 不合法: 不支持char类型 int b = 10; // 合法 int c; // 不合法: 变量必须在定义的时候初始化 float d=10, e=9; // 不合法: 一次只能定义一个变量 表达式 诸如加减乘除，比较大小等运算的\u0008语句都被称为表达式。C语言支持相当多的表达式，如算术表达式，比较表达式，甚至位运算表达式，但是为了简便请见，YC0只支持部分基础的表达式，其他表达式将作为后续版本的扩展内容。\nYC0支持的表达式按优先级从高到低如下表所示:\n   语义 运算符 结合性 例子     括号 () 无 (a+b)   函数调用 () 左结合 f(10)   相反数，类型转换 - (type) 右结合 -10, (int)3.14   乘除 * / 左结合 3*9, 10/2   加减 + - 左结合 3+10, 4-9   大小比较 \u0026gt; \u0026gt;= \u0026lt; \u0026lt;= 左结合 a\u0026gt;b, a\u0026gt;=b, c\u0026lt;d, c\u0026lt;=d   相等比较 == != 左结合 a==b, a!=b   赋值 = 右结合 a=b, a=b=c    分支 YC0只支持if分支语句，不支持switch和goto。\n 每个if语句，可能包含一个else语句，但YC0不支持else if语句。 if或else里的内容必须使用大括号包裹，即使里面只有一个语句。  合法例子:\nif(a\u0026lt;0) { a = a+1; } if(a\u0026lt;0) { a = a+1; } else { b = b-1; }   不合法例子:\nif(a==2) { a=1; } else if(a==3) { a=3; } // 不支持else if  // 即使只有一个语句也必须使用大括号 if(a==4) a = 3;    循环 YC0只支持while循环，for和do while循环为后续版本的扩展内容。\n 与if一样, while循环的循环体必须使用大括号包裹，即使里面只有一条语句。  函数 YC0支持函数，但是与C语言不同的是，YC0不能只定义函数声明而不实现，函数调用只能通过f(1,2,3)的形式调用，不能通过函数指针。\n 什么是函数声明? ↕  在c语言中下面的语句是合法的, 函数声明只有函数签名而没有函数体。\nint add(int x, int y); int add(int, int); // 你甚至可以不写形参的名字 上述语法在YC0中是不允许的。\n   以下是一个合法的函数定义和调用。\nint add(int x, int y) { return x+y; } // 与C类似, 你必须定义一个名叫main的主函数作为程序入口 int main() { int c = add(1,2); return 0; } YC1 "});index.add({'id':11,'href':'/ycc/lab/','title':"实验",'content':""});index.add({'id':12,'href':'/ycc/lab/summary/','title':"实验综述",'content':"实验综述 "});index.add({'id':13,'href':'/ycc/lab/note/','title':"实验说明",'content':"Ubi loqui Mentem genus facietque salire tempus bracchia Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes , Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"});index.add({'id':14,'href':'/ycc/framework-tutorial/','title':"框架指导",'content':""});index.add({'id':15,'href':'/ycc/lab/lang-std/cheatsheet/','title':"特性汇总",'content':"特性汇总 这里以最简洁的形式汇总了YC语言各个版本支持的特性。\n"});index.add({'id':16,'href':'/ycc/lab/lang-std/','title':"语言规范",'content':"语言规范 YC1语言\u0008与C语言非常接近，但是YC语言被设计的比C语言更为简单，因为你们需要为这个语言编写一个编译器。\n我们大幅精简并修改了部分C语言的语法形成YC语言。大部分YC语言的语法都可以用LL(1)文法进行描述，\u0008我们希望这个更为简单的\u0026quot;C语言\u0026quot;能够帮助你们在这个学期内及时的完成整个实验。  为了\u0008让你们能够更快速的编写你的编译器，我们删除了许多C语言中比较复杂或不常用的语法，如：\n 预处理指令与宏：YC语言只支持单文件编译，不支持 宏 。 复杂的类型系统：YC语言只支持有限的几种数据类型。 复杂的指针用法：YC语言只支持有限的指针使用方法（指针为扩展内容）。 \u0026hellip;  为了让你能轻松的手写语法分析器，我们改进了C语言的部分语法使其更容易解析，如\n 数组定义使用Java风格2, int[] a = new int[10]。(数组实现不是强制要求)。 \u0026hellip;  为满足不同层次学生的需求，我们为YC语言制定了多个版本，每个版本都会在前一个版本添加一些新特性。所有学生只要求完成YC0这个版本，后面的版本将提供给学有余力的同学完成。\n YC0 YC0是C语言的一个绝对子集(一个合法的YC0程序一定是一个合法的C程序，你可以使用任何一个C语言编译器编译YC0的程序)。\n这个版本包含了YC语言的基础语法，如变量，函数，循环，分支，表达式等。\n  词法规范 语法规范 语义说明     YC1 开发中\u0026hellip;    YC是Yan C的缩写。 \u0026#x21a9;\u0026#xfe0e;\n 为什么这种风格更好解析? 事实上这是一个课后题, 请思考。 \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':17,'href':'/ycc/other/','title':"其他",'content':""});index.add({'id':18,'href':'/ycc/lab/lang-std/new-features/','title':"新特性提案",'content':"新特性提案 此页面还在撰写中\u0026hellip;  这个页面包含了可能会添加进下一个版本中的语言新特性。\n新特性池  struct 字符串  开发周期 为了保证学生能够较好的完成实验，我们对添加进入YC语言的特性十分的谨慎。这也是为什么我们采用多个版本迭代的方式进行语言特性的选取与开发。\n一般来说，所有学生只被要求实现YC语言前几个版本的特性（现在是YC0），\u0008学有余力的同学可以选择继续实现后面的版本。随着版本不断的更新，以后实验可能转向由我们提供编译器的基础实现（YC0），然后由学生实现新特性（YC1～YCn） -\u0026gt; 待定。\n开发周期按学年进行，基本流程如下：\n  特性征集：根据学生，开发组提议内容形成一个新特性池。\n  选取特性：周期初由所有开发组成员从新特性池中选取数个新特性。\n  标准编译器与框架的开发： 在上一个版本的标准编译器中\u0008实现新特性，并更新相应自动评测，实验框架代码。\n  特性冻结：在每年的编译原理实验开始前两周对特性进行冻结，已经实现完成的特性准备发布，未实现的特性顺延至下一个周期。\n  集成测试：特性冻结之后，对所有待发布的特性进行一次充分的测试。\n  补充文档：完善必要的文档，包括主站，文档站和实验站。\n  发布新版本：将新版本发布至\u0008Github Release和Maven中央仓库。\n    graph TD; 特性征集--选取特性; 选取特性--标准编译器开发; 选取特性--自动评测开发; 选取特性--框架开发; 标准编译器开发--特性冻结; 自动评测开发--特性冻结; 框架开发--特性冻结; 特性冻结--集成测试; 集成测试--补充文档; 补充文档--新版本发布;   "});index.add({'id':19,'href':'/ycc/framework-tutorial/java/','title':"Java",'content':"Java框架指导 待编写  "});index.add({'id':20,'href':'/ycc/framework-tutorial/java/lexer/','title':"Lab1 词法分析器",'content':"词法分析器 "});index.add({'id':21,'href':'/ycc/framework-tutorial/java/parser/','title':"Lab2 语法分析器",'content':"语法分析器 "});})();